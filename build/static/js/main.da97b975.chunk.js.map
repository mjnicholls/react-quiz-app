{"version":3,"sources":["components/Questionnaire.js","App.js","index.js"],"names":["Questionnaire","handleAnswer","data","question","correct_answer","incorrect_answers","shuffledAnswers","sort","Math","random","className","dangerouslySetInnerHTML","__html","map","answer","onclick","App","useState","questions","setQuestions","currentIndex","setCurrentIndex","score","setScore","gameEnded","setGameEnded","useEffect","fetch","then","res","json","results","length","newIndex","ReactDOM","render","document","getElementById"],"mappings":"mMAwBeA,EArBO,SAAC,GAChB,IADiBC,EAClB,EADkBA,aAClB,IADgCC,KAAOC,EACvC,EADuCA,SAAUC,EACjD,EADiDA,eAAgBC,EACjE,EADiEA,kBAGjEC,EAAkB,CAACF,GAAD,mBAAoBC,IAAmBE,MAAK,kBAAMC,KAAKC,SAAW,MACtF,OACA,gCACA,qBAAKC,UAAU,qDAAf,SACA,oBAAIA,UAAU,WAAWC,wBAAyB,CAAEC,OAAOT,OAG/D,qBAAKO,UAAU,8BAAf,SAECJ,EAAgBO,KAAI,SAACC,GAAD,OAErB,wBAAQJ,UAAS,UAAKN,IAAmBU,EAAS,gBAAkB,WAAnD,qDAAmHC,QAAS,kBAAMd,EAAaa,IAAhK,SAA0KA,aCgC3JE,MA5Cf,WAEA,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KA0BE,OAvBFC,qBAAU,WACRC,MAXc,qFAWCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQF,MAAK,SAAC1B,GAC9CiB,EAAajB,EAAK6B,SAClBV,EAAgB,CAAC,SAEjB,IAkBMG,EACT,qBAAId,UAAU,iCAAd,4BAA+DY,KACzDJ,EAAUc,OAAS,EACrB,qBAAKtB,UAAU,YAAf,SACH,cAAC,EAAD,CAAeR,KAAMgB,EAAUE,GAAenB,aApB1B,SAACa,GAEpB,IAAMmB,EAAWb,EAAe,EAChCC,EAAgBY,GAGZnB,IAAWI,EAAUE,GAAchB,gBACrCmB,EAASD,EAAQ,GAGbW,GAAYf,EAAUc,QACxBP,GAAa,QAajB,oBAAIf,UAAU,gCAAd,4B,MCtCFwB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.da97b975.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Questionnaire = ({handleAnswer, data: {question, correct_answer, incorrect_answers},\r\n}) => {\r\n\r\nconst shuffledAnswers = [correct_answer, ...incorrect_answers].sort(() => Math.random() - 0.5);\r\n    return (\r\n    <div>\r\n    <div className=\"bg-white text-purple-800 p-10 rounded-lg shadow-md\">\r\n    <h2 className=\"text-2xl\" dangerouslySetInnerHTML={{ __html:question }} />\r\n\r\n  </div>\r\n<div className=\"grid grid-cols-2 gap-6 mt-6\">\r\n\r\n{shuffledAnswers.map((answer) => (\r\n\r\n<button className={`${correct_answer === answer ? 'bg-purple-300' : 'bg-white' } p-4 text-purple-800 font-semibold rounded shadow`} onclick={() => handleAnswer(answer)}>{answer}</button>\r\n\r\n))}\r\n</div>\r\n</div>\r\n)};\r\n\r\nexport default Questionnaire;\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { Questionnaire } from './components';\n\nconst API_URL = \"https://opentdb.com/api.php?amount=10&category=10&difficulty=medium&type=multiple\";\n\nfunction App() {\n\nconst [questions, setQuestions] = useState([]);\nconst [currentIndex, setCurrentIndex] = useState(0);\nconst [score, setScore] = useState(0);\nconst [gameEnded, setGameEnded] = useState(false);\n\n\nuseEffect(() => {\n  fetch(API_URL).then((res) => res.json()).then((data) => {\n   setQuestions(data.results);\n   setCurrentIndex([0])\n  });\n}, []);\n\nconst handleAnswer = (answer) => {\n\n  const newIndex = currentIndex + 1\n  setCurrentIndex(newIndex);\n\n\n  if (answer === questions[currentIndex].correct_answer) {\n    setScore(score + 1);\n  }\n\n    if (newIndex >= questions.length) {\n      setGameEnded(true);\n    }\n  };\n\n\n  return gameEnded  ? (\n<h1 className=\"text 3-xl text-white font-bold\">Your score was {score}</h1>\n  ) : questions.length > 0 ? (\n    <div className=\"container\">\n <Questionnaire data={questions[currentIndex]} handleAnswer={handleAnswer} />\n\n </div>\n) : (\n  <h2 className=\"text-2xl text-white font-bold\">Loading . . .</h2>\n);\n   \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(\n \n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}